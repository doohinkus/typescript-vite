{"version":3,"file":"index-WrdSkr0e.js","sources":["../../src/question.ts","../../src/quiz.ts","../../src/main.ts"],"sourcesContent":["const operatorArray: string[] = [\"ร\", \"รท\", \"-\", \"+\"];\n\ninterface QuestionResult {\n  num1: number;\n  num2: number;\n  activeOperator: string;\n  answer: number;\n}\n\nclass Operators {\n  getRandomOperator(): string {\n    return operatorArray[Math.floor(Math.random() * operatorArray.length)];\n  }\n}\n\nclass Question {\n  generateRandomInteger(integer: number): number {\n    return Math.floor(Math.random() * integer) + 1;\n  }\n\n  generateRandomQuestion(): QuestionResult {\n    const operators = new Operators();\n    const activeOperator = operators.getRandomOperator();\n    let num1 = this.generateRandomInteger(20);\n    const num2 = this.generateRandomInteger(num1);\n\n    let answer: number;\n\n    switch (activeOperator) {\n      case operatorArray[0]: {\n        answer = num1 * num2;\n        break;\n      }\n      case operatorArray[1]: {\n        num1 = num1 * num2;\n        answer = num1 / num2;\n        break;\n      }\n      case operatorArray[2]: {\n        answer = num1 - num2;\n        break;\n      }\n      case operatorArray[3]: {\n        answer = num1 + num2;\n        break;\n      }\n      default: {\n        answer = 0;\n      }\n    }\n\n    return { num1, num2, activeOperator, answer };\n  }\n}\n\nexport const question = new Question();\n","import { question } from \"./question\";\n\n// Constants for DOM element IDs\nconst DOM_IDS = {\n  QUESTION: \"question\",\n  ANSWER: \"answer\",\n  SCORE: \"score\",\n  FEEDBACK: \"feedback\",\n  CHECK_ANSWER: \"check_answer\"\n} as const;\n\n// Types\ninterface QuestionResult {\n  num1: number;\n  num2: number;\n  activeOperator: string;\n  answer: number;\n}\n\ninterface QuizState {\n  score: number;\n  currentQuestion: QuestionResult;\n  feedback: string;\n}\n\n// Initial state\nconst state: QuizState = {\n  score: 0,\n  currentQuestion: question.generateRandomQuestion(),\n  feedback: \"\"\n};\n\n// Helper functions\nconst getElement = <T extends HTMLElement>(id: string): T | null => {\n  const element = document.getElementById(id);\n  if (!element) {\n    console.warn(`Element with id \"${id}\" not found`);\n    return null;\n  }\n  return element as T;\n};\n\nconst updateElementText = (id: string, text: string): void => {\n  const element = getElement<HTMLElement>(id);\n  if (element) {\n    element.textContent = text;\n  }\n};\n\nexport function displayQuestion(): void {\n  const { num1, num2, activeOperator } = state.currentQuestion;\n  updateElementText(DOM_IDS.QUESTION, `${num1} ${activeOperator} ${num2} = ?`);\n}\n\nexport function checkAnswer(): void {\n  const responseInput = getElement<HTMLInputElement>(DOM_IDS.ANSWER);\n  if (!responseInput) return;\n\n  const userAnswer = parseInt(responseInput.value);\n  const { answer } = state.currentQuestion;\n\n  state.feedback = userAnswer === answer\n    ? \"Correct!\"\n    : `Incorrect. The correct answer is ${answer}.`;\n\n  if (userAnswer === answer) {\n    state.score++;\n  }\n\n  updateElementText(DOM_IDS.FEEDBACK, state.feedback);\n  updateElementText(DOM_IDS.SCORE, `Score: ${state.score}`);\n\n  state.currentQuestion = question.generateRandomQuestion();\n  displayQuestion();\n  responseInput.value = \"\";\n}\n\nexport function setupQuiz(): void {\n  const checkAnswerButton = getElement<HTMLButtonElement>(DOM_IDS.CHECK_ANSWER);\n  if (checkAnswerButton) {\n    checkAnswerButton.addEventListener(\"click\", checkAnswer);\n  }\n}\n","import \"./style.css\";\nimport { displayQuestion, setupQuiz } from \"./quiz\";\n\ndocument.querySelector<HTMLDivElement>(\"#app\")!.innerHTML = `\n  <h1>Math Quiz: Multiplication and Division</h1>\n    <div class=\"question\" id=\"question\"></div>\n    <input type=\"text\" id=\"answer\" placeholder=\"Your answer\">\n    <button id=\"check_answer\">Submit</button>\n    <div class=\"feedback\" id=\"feedback\"></div>\n    <div class=\"score\" id=\"score\"></div>\n`;\n\nsetupQuiz();\ndisplayQuestion();\n"],"names":["operatorArray","Operators","Question","integer","activeOperator","num1","num2","answer","question","DOM_IDS","state","getElement","id","element","updateElementText","text","displayQuestion","checkAnswer","responseInput","userAnswer","setupQuiz","checkAnswerButton"],"mappings":"ssBAAA,MAAMA,EAA0B,CAAC,IAAK,IAAK,IAAK,GAAG,EASnD,MAAMC,CAAU,CACd,mBAA4B,CACnB,OAAAD,EAAc,KAAK,MAAM,KAAK,SAAWA,EAAc,MAAM,CAAC,CAAA,CAEzE,CAEA,MAAME,CAAS,CACb,sBAAsBC,EAAyB,CAC7C,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIA,CAAO,EAAI,CAAA,CAG/C,wBAAyC,CAEjC,MAAAC,EADY,IAAIH,EAAU,EACC,kBAAkB,EAC/C,IAAAI,EAAO,KAAK,sBAAsB,EAAE,EAClC,MAAAC,EAAO,KAAK,sBAAsBD,CAAI,EAExC,IAAAE,EAEJ,OAAQH,EAAgB,CACtB,KAAKJ,EAAc,CAAC,EAAG,CACrBO,EAASF,EAAOC,EAChB,KAAA,CAEF,KAAKN,EAAc,CAAC,EAAG,CACrBK,EAAOA,EAAOC,EACdC,EAASF,EAAOC,EAChB,KAAA,CAEF,KAAKN,EAAc,CAAC,EAAG,CACrBO,EAASF,EAAOC,EAChB,KAAA,CAEF,KAAKN,EAAc,CAAC,EAAG,CACrBO,EAASF,EAAOC,EAChB,KAAA,CAEF,QACWC,EAAA,CACX,CAGF,MAAO,CAAE,KAAAF,EAAM,KAAAC,EAAM,eAAAF,EAAgB,OAAAG,CAAO,CAAA,CAEhD,CAEa,MAAAC,EAAW,IAAIN,ECpDtBO,EAAU,CACd,SAAU,WACV,OAAQ,SACR,MAAO,QACP,SAAU,WACV,aAAc,cAChB,EAiBMC,EAAmB,CACvB,MAAO,EACP,gBAAiBF,EAAS,uBAAuB,EACjD,SAAU,EACZ,EAGMG,EAAqCC,GAAyB,CAC5D,MAAAC,EAAU,SAAS,eAAeD,CAAE,EAC1C,OAAKC,IACK,QAAA,KAAK,oBAAoBD,CAAE,aAAa,EACzC,KAGX,EAEME,EAAoB,CAACF,EAAYG,IAAuB,CACtD,MAAAF,EAAUF,EAAwBC,CAAE,EACtCC,IACFA,EAAQ,YAAcE,EAE1B,EAEO,SAASC,GAAwB,CACtC,KAAM,CAAE,KAAAX,EAAM,KAAAC,EAAM,eAAAF,GAAmBM,EAAM,gBAC3BI,EAAAL,EAAQ,SAAU,GAAGJ,CAAI,IAAID,CAAc,IAAIE,CAAI,MAAM,CAC7E,CAEO,SAASW,GAAoB,CAC5B,MAAAC,EAAgBP,EAA6BF,EAAQ,MAAM,EACjE,GAAI,CAACS,EAAe,OAEd,MAAAC,EAAa,SAASD,EAAc,KAAK,EACzC,CAAE,OAAAX,GAAWG,EAAM,gBAEzBA,EAAM,SAAWS,IAAeZ,EAC5B,WACA,oCAAoCA,CAAM,IAE1CY,IAAeZ,GACXG,EAAA,QAGUI,EAAAL,EAAQ,SAAUC,EAAM,QAAQ,EAClDI,EAAkBL,EAAQ,MAAO,UAAUC,EAAM,KAAK,EAAE,EAElDA,EAAA,gBAAkBF,EAAS,uBAAuB,EACxCQ,EAAA,EAChBE,EAAc,MAAQ,EACxB,CAEO,SAASE,GAAkB,CAC1B,MAAAC,EAAoBV,EAA8BF,EAAQ,YAAY,EACxEY,GACgBA,EAAA,iBAAiB,QAASJ,CAAW,CAE3D,CC/EA,SAAS,cAA8B,MAAM,EAAG,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS5DG,EAAU,EACVJ,EAAgB"}